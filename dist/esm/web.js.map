{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,gBAAiB,SAAQ,SAAS;IAC7C,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,OAAO,CAAC,OAAyB;QACrC,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAChC,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;QAC9C,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAC7B,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,KAAK,CAAC,eAAe;QACnB,MAAM,MAAM,GAAG,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;QACxC,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,KAAK,CAAC,OAAO,CAAC,OAAyB;QACrC,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAChC,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,KAAK,CAAC,cAAc,CAAC,OAAqD;QACxE,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;QACvC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { SpeechAndTextPlugin } from './definitions';\n\nexport class SpeechAndTextWeb extends WebPlugin implements SpeechAndTextPlugin {\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n  async InitSTT(options: { type: number }): Promise<{ value: string }> {\n    const result = { value: '' };\n    console.log('InitSTT', options);\n    return result;\n  }\n\n  async startRecording(): Promise<{ text: string; isEndpoint: boolean }> {\n    const result = { text: '', isEndpoint: true };\n    return result;\n  }\n\n  async stopRecording(): Promise<{ value: string }> {\n    const result = { value: '' };\n    return result;\n  }\n  async checkPermission(): Promise<{ hasPermission: boolean }> {\n    const result = { hasPermission: false };\n    return result;\n  }\n  async InitTTS(options: { type: number }): Promise<{ value: string }> {\n    const result = { value: '' };\n    console.log('InitTTS', options);\n    return result;\n  }\n  async generateSpeech(options: { text: string; sid: number; speed: number }): Promise<{ value: string }> {\n    const result = { value: '' };\n    console.log('generateSpeech', options);\n    return result;\n  }\n}\n"]}