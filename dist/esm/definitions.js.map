{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface SpeechAndTextPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n  InitSTT(): Promise<{ value: string }>;\n  startRecording(): Promise<{ text: string; isEndpoint: boolean }>;\n  stopRecording(): Promise<{ value: string }>;\n  checkPermission(): Promise<{ hasPermission: boolean }>;\n\n  InitTTS(options: { type: number }): Promise<{ value: string }>;\n  generateSpeech(options: { text: string; sid: number; speed: number }): Promise<{ value: string }>;\n\n  addListener(\n    eventName: 'onRecognizerResult',\n    listenerFunc: (data: { text: string; isEndpoint: boolean }) => void,\n  ): Promise<PluginListenerHandle>;\n  addListener(\n    eventName: 'onGenerationComplete',\n    listenerFunc: (data: { value: string }) => void,\n  ): Promise<PluginListenerHandle>;\n}\n"]}